// –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
function main(msg) {
  console.log('–†–µ—Å–ø–æ–Ω–¥–µ—Ä –ø—Ä–∏—Å–ª–∞–ª:\n' + msg + '\n')
  if (msg.match(/üí¨ —á–∞—Ç –ª–∞–≥–µ—Ä—è/))
    return 'üèò–í –ù—å—é-–†–∏–Ω–æ'
  if (msg.match(/üë£/))
    return actPath(msg)
  if (msg.match(/—Ç—ã –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–µ–Ω/))
    return '/myfood'
  if (msg.match(/use_1[0-2]\d/):
      return actFood(msg)
  if (msg.match(/ü§ù–ø–µ—Ä–µ–¥–∞—Ç—å \/givestuff/))
      return '/givestuff'
  if (
    msg.match(/—Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å —É–≤–∏–ª—å–Ω—É—Ç—å –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞/)
    || msg.match(/–≤–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏ –Ω–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª/)
  ) return '‚öîÔ∏è–î–∞—Ç—å –æ—Ç–ø–æ—Ä'


    case '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è':
      console.log('ok!\n')
    case /—Ç—ã –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É!/:
    case /–∏ –µ–≥–æ/:
    case /\nüêê/:
    case /\sü§ò/:
    case /\(–±–µ–∑ –±–∞–Ω–¥—ã\)/:
    case /–≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n üï≥+/:
    case /–¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä\n üï≥+/:
      return 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ'
  }
}

// --------------------
// –í–µ—Ç–∫–∞ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–∞
function actPath(msg) {
  let x = Number(msg.match(/üë£(\d)+–∫–º/)[1])
  switch (x) {
    case 2: return 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ'
    case 22: return 'üö∑–í –¢–µ–º–Ω—É—é –∑–æ–Ω—É'
    case 52: return 'üö∑–í –¢–µ–º–Ω—É—é –∑–æ–Ω—É'
    case 63: return '/voevat_suda'
    case 74: case 75: return '‚õ∫Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è<#>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å'
  }
}

// --------------------
// –í–µ—Ç–∫–∞ –∂—Ä–∞—á–∫–∏
function actFood() {
  let food = Number(msg.match(/use_(\d{3})/)[1])
  switch (food) {
    case 101: case 104: case 117: case 119:
    case 121: case 122: return '/use_'+food
  }
}

// ====================
// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
const express    = require("express")
const bodyParser = require("body-parser")
const app        = express()
app.use(bodyParser.urlencoded({ extended: false }))
app.use(bodyParser.json())
app.all('*', (req, res) => {
  res.send(JSON.stringify({"replies": [
    {"message": main(req.body.query.message)}
  ]}))
})
app.listen(process.env.PORT || 3000)
