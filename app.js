// –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
function main(msg) {
  console.log('–†–µ—Å–ø–æ–Ω–¥–µ—Ä –ø—Ä–∏—Å–ª–∞–ª:\n' + msg + '\n')

  if (msg.match('–ß–∞—Ç –ª–∞–≥–µ—Ä—è'))
    return 'üèò–í –ù—å—é-–†–∏–Ω–æ'

  if (msg.match('–¢–≤–æ–π –ø—É—Ç—å –ø—Ä–µ–≥—Ä–∞–¥–∏–ª –∏—Å–ø–æ–ª–∏–Ω—Å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –º–æ–Ω—Å—Ç—Ä.'))
    return '‚öîÔ∏è–ê—Ç–∞–∫–æ–≤–∞—Ç—å'

  let parse = msg.match(/üë£(\d+)–∫–º/)
  if (parse) parse = actPath(parse)
  if (parse) return parse

  if (msg.match('–≤ —ç—Ç–æ—Ç —Ä–∞–∑ —É–∂–µ –±—É–∫–≤–∞–ª—å–Ω–æ.'))
    return '‚õ∫Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è<#>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å'

  if (msg.match('–≤ —ç—Ç–æ—Ç —Ä–∞–∑ —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–¥–∞—á–∏.'))
    return '‚öîÔ∏è–ê—Ç–∞–∫–æ–≤–∞—Ç—å'

  if (msg.match('/view'))
    return 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ'

  if (
    msg.match('–¢—ã —Å—ä–µ–ª ')
    || msg.match('–¢—ã –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É!')
    || msg.match('–∏ –µ–≥–æ')
    || msg.match('\nüêê')
    || msg.match('\sü§ò')
    || msg.match('\(–±–µ–∑ –±–∞–Ω–¥—ã\)')
    || msg.match('–≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n üï≥+')
    || msg.match('–¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä\n üï≥+')
  ) return 'üîé–îe–π—Å—Ç–≤–∏–µ'

  if (msg.match('–¢—ã –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–µ–Ω.'))
    return '/myfood'
  parse = msg.match(/\/use_1[0-2]\d/g)
  if (parse) return parse[0]
  
  parse = msg.match('\/del_[0-1]\d'g)
  if (parse) return parse[0]

  if (msg.match('–¢—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª –±—Ä–æ–¥—è—á–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞,'))
      return '/buy_5i<#>üîé–îe–π—Å—Ç–≤–∏–µ'
      


  if (
    msg.match('–¢—ã –Ω–µ —Å–º–æ–∂–µ—à—å —É–≤–∏–ª—å–Ω—É—Ç—å –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞')
    || msg.match('–í–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏ –Ω–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª')
  ) return '‚öîÔ∏è–î–∞—Ç—å –æ—Ç–ø–æ—Ä'

  if (msg.match('/dl_'))
    return actClean(msg)
}

// --------------------
// –í–µ—Ç–∫–∞ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–∞
function actPath(parse) {
  let x = Number(parse[1])

  switch (x) {
    case 2: return 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ'
    case 22: return 'üö∑–í –¢–µ–º–Ω—É—é –∑–æ–Ω—É'
//    case 52: return 'üö∑–í –¢–µ–º–Ω—É—é –∑–æ–Ω—É'
    case 54: return '/voevat_suda'
    case 74: case 75: return '‚õ∫Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è<#>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å'
    default: return false
  }
}

// --------------------
// –í–µ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏
function actClean(msg) {
  const badGoods = [
    'BFGzzv-4000',
    '–ë–æ–µ–≤–∞—è –±—Ä–æ–Ω—è',
    '–ë—Ä–æ–Ω—è –±—Ä–∞—Ç—Å—Ç–≤–∞',
    '–ö–∏–Ω–∂–∞–ª',
    '–ö–æ–∂–∞–Ω–Ω—ã–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫',
    '–ú–∞—á–∞—Ç–µ',
    '–ú–æ—Ç–æ-–∑–∞—â–∏—Ç–∞',
    '–ü–ª–æ—Ç–Ω—ã–π –∫–∞–ø—é—à–æ–Ω',
    '–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑',
    '–°—É–ø–µ—Ä–º–æ–ª–æ—Ç',
    '–§–∞–ª–º–µ—Ä—Å–∫–∏–π –∫–ª–∏–Ω–æ–∫',
    '–§—É—Å—Ä–æ–Ω–µ—Ç',
    '–•–ª—ã—Å—Ç',
    '–≠–ª–µ–∫—Ç—Ä–æ–º–µ—á'
  ]

  let parse
  for (let i=0; i<badGoods.length; i++) {
    parse = msg.match(new RegExp(badGoods[i]+'.*(\\/dl_\\d+)'))
    if (parse) break
  }
  if (parse) return parse[1]
}

// ====================
// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
const express    = require("express")
const bodyParser = require("body-parser")
const app        = express()
app.use(bodyParser.urlencoded({ extended: false }))
app.use(bodyParser.json())
app.all('*', (req, res) => {
  res.send(JSON.stringify({"replies": [
    {"message": main(req.body.query.message)}
  ]}))
})
app.listen(process.env.PORT || 3000)
